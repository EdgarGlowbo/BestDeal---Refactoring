/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/app.js":
/*!****************************!*\
  !*** ./src/scripts/app.js ***!
  \****************************/
/***/ (() => {

eval("// Queries\r\n// Buy mats interface\r\nconst matPrice = document.querySelector(\".o-input-price\");\r\nconst matQuantity = document.querySelector(\".o-input-quantity\");\r\nconst submitMaterialsForm = document.querySelector(\".m-main-ui__form\");\r\nconst dropdownListDisplay = document.querySelector(\".o-form__dropdown-list\");\r\nconst materialList = document.querySelector('.o-materials__list');\r\nconst materialListText = document.querySelector('.o-materials__span');\r\n// Available crafts window\r\nconst displayCrafts = document.querySelector(\".m-crafts\");\r\n// Inventory window\r\nconst inventoryMainUI = document.querySelector('.m-main-ui__inventory');\r\nconst undoButton = document.querySelector('.c-header__undo-button');\r\n\r\n\r\n// Stores the id of the material selected in a mouse event\r\n\r\nlet selectedMat = 'eternalFire';\r\n\r\n//Stores constructed objects\r\nconst constructedObjects = [];\r\n\r\n// Submit prices and quantity of materials \r\n\r\nconst buyMaterials = (price, quantity, material) => {\r\n\r\n  // Checks for items in quantityCounter\r\n\r\n  if (quantityCounter[material] === 0) {\r\n    rawAverage[material] = price;\r\n    quantityCounter[material] = quantity;\r\n\r\n  } else {\r\n\r\n    const average = rawAverage[material];\r\n    const inBag = quantityCounter[material];\r\n\r\n    const newAverage =  ((average * inBag) + (price * quantity)) / (inBag + quantity);\r\n    rawAverage[material] = Math.round(newAverage);\r\n    quantityCounter[material] += Math.round(parseInt(quantity));\r\n\r\n  }\r\n  localStorage.setItem('averages', JSON.stringify(rawAverage));\r\n  localStorage.setItem('inventory', JSON.stringify(quantityCounter)); \r\n};\r\n\r\n// Show available crafts\r\n\r\nclass AvailableCrafts {\r\n  cost = 0;\r\n  constructor(name, recipe) {\r\n    this.name = name;    \r\n    this.recipe = JSON.parse(recipe);\r\n  }\r\n  calcCraftCost() {\r\n    let calculatedCost = 0;\r\n    Object.keys(this.recipe).forEach(material => {\r\n      calculatedCost += this.recipe[material] * rawAverage[material];\r\n      this.cost = calculatedCost;            \r\n    });\r\n    return this;\r\n  }\r\n  craftItem(quantity) {\r\n    Object.keys(this.recipe).forEach(material => {\r\n      quantityCounter[material] -= (this.recipe[material] * quantity)      \r\n    });\r\n    localStorage.setItem('averages', JSON.stringify(rawAverage));\r\n    localStorage.setItem('inventory', JSON.stringify(quantityCounter));        \r\n    return this;\r\n  }\r\n  renderCrafts(i) {\r\n    matCost[i].textContent = Math.round(this.cost).toString();\r\n  }\r\n  enoughItems(i) {    \r\n    itemsToCraft[i].parentElement.classList.add('o-crafts__item--available');\r\n    Object.keys(this.recipe).forEach(mat => {      \r\n      \r\n      if (quantityCounter[mat] < this.recipe[mat]) {\r\n        itemsToCraft[i].parentElement.classList.remove('o-crafts__item--available');            \r\n        itemsToCraft[i].parentElement.classList.add('o-crafts__item--unavailable');      \r\n      }       \r\n    });\r\n  }   \r\n}\r\n\r\n\r\n// Class inherits from AvailableCrafts \r\nclass AvailableEpics extends AvailableCrafts {\r\n  profit = 0;\r\n  inSaleStatus = false;\r\n  price = 0;\r\n  calcProfit(target) {\r\n    this.profit = Math.round((this.price * 0.95) - this.cost);\r\n    // itemsToCraft (form) children nodes to update span element\r\n    target.textContent = this.profit.toString();\r\n    return this;\r\n  }\r\n  inSale(target, objIndex) {\r\n    if (this.inSaleStatus) {\r\n      // If inSaleStatus === true then remove item from localstorage and calls renderEpics to update the value\r\n      // for the target        \r\n      this\r\n        .calcCraftCost(objIndex)\r\n        .renderEpics(objIndex)\r\n        .inSaleStatus = false;\r\n      target[3].classList.remove('o-crafts__btn--in-sale');      \r\n        \r\n    } else {\r\n      // Calls craftItem and inSale methods. \r\n      this.inSaleStatus = true;      \r\n      target[3].classList.add('o-crafts__btn--in-sale');\r\n      localStorage.setItem(target[1].id, JSON.stringify(constructedObjects[objIndex]));\r\n      mementoSave();\r\n\r\n    }        \r\n  }\r\n \r\n  renderEpics(i) {\r\n    craftCostInput[i].value = Math.round(this.cost).toString();\r\n    return this;\r\n  }\r\n}\r\n// Constructs all of the objects at the start of the application\r\nconst startApp = () => {\r\n  if (localStorage.getItem('averages') && localStorage.getItem('inventory')) {\r\n    quantityCounter = JSON.parse(localStorage.getItem('inventory'));\r\n    rawAverage = JSON.parse(localStorage.getItem('averages'));\r\n  }\r\n\r\n\r\n  if (typeof materialsRecipe === 'undefined') {\r\n    const epicCrafts = Object.keys(itemsPerRecipe);\r\n    let stylingButtonClass = '';\r\n  \r\n      // Creates objects instances and pushes them to an array\r\n      epicCrafts.forEach(item => constructedObjects.push(new AvailableEpics(itemsPerRecipe[item][\"name\"], JSON.stringify(itemsPerRecipe[item][\"recipe\"]))));\r\n           \r\n    \r\n    for (let i = 0; i < epicCrafts.length; i++) {\r\n      // Checks for saved objects in localstorage and sets cost and insalestatus properties to the values of the saved objects before rendering them\r\n\r\n      if (localStorage.getItem(epicCrafts[i])) {\r\n        const savedObj = JSON.parse(localStorage.getItem(epicCrafts[i]))\r\n        constructedObjects[i].cost = savedObj.cost;\r\n        constructedObjects[i].price = savedObj.price;\r\n        constructedObjects[i].profit = savedObj.profit;\r\n        constructedObjects[i].inSaleStatus = savedObj.inSaleStatus;\r\n        stylingButtonClass = constructedObjects[i].inSaleStatus ? 'o-crafts__btn--in-sale' : 'none';\r\n      }                  \r\n      displayCrafts.innerHTML += `\r\n        <div class=\"o-crafts__item\">\r\n          <h3 class=\"o-crafts__title o-crafts__item-name o-text o-text-title\">${constructedObjects[i].name}</h3>\r\n          <form class=\"o-crafts__interface\">              \r\n            <input type=\"text\" class=\"o-crafts__input o-crafts__price o-input\" value=\"${constructedObjects[i].price}\" placeholder=\"$\">\r\n            <input type=\"text\" class=\"o-crafts__input o-crafts__cost o-input\" id=\"${epicCrafts[i]}\" value=\"${constructedObjects[i].cost}\">\r\n            <span class=\"o-crafts__text o-crafts__profit o-text-span\">${constructedObjects[i].profit}</span>\r\n            <button type=\"submit\" class=\"o-crafts__btn o-btn ${stylingButtonClass}\">In Sale</button>\r\n          </form>\r\n        </div>\r\n      `;\r\n    }\r\n              \r\n  } else {\r\n    const matCrafts = Object.keys(materialsRecipe);\r\n    \r\n      matCrafts.forEach(item => constructedObjects.push(new AvailableCrafts(materialsRecipe[item][\"name\"], JSON.stringify(materialsRecipe[item][\"recipe\"]))));\r\n      \r\n    for (let i = 0; i < matCrafts.length; i++) {\r\n\r\n      displayCrafts.innerHTML += `\r\n      <div class=\"o-crafts__item\">\r\n        <h3 class=\"o-crafts__title o-crafts__item-name o-text o-text-title\">${constructedObjects[i].name}</h3>\r\n        <form class=\"o-crafts__interface\">\r\n          <span class=\"o-crafts__text o-crafts__item-cost o-text o-text-span\" id=\"${matCrafts[i]}\">${constructedObjects[i].cost}</span>\r\n          <span class=\"o-crafts__text o-text o-text-span\">x</span>\r\n          <input type=\"text\" class=\"o-crafts__input o-crafts__quantity o-input\">\r\n          <button type=\"submit\" class=\"o-crafts__btn o-btn\">Craft</button>\r\n        </form>\r\n      </div>\r\n      `;\r\n    }\r\n  }\r\n};\r\n// Renders the name from the materials in materialList ul, gets the id of the li elements to access those properties in quantityCounter and rawAverage and display them\r\nconst startInventory = () => {  \r\n  for (let i = 0; i < materialList.children.length; i++) {\r\n    const matName = materialList.children[i].textContent;\r\n    const matId = materialList.children[i].id;\r\n    inventoryMainUI.innerHTML += `\r\n    <div class=\"o-inventory__item\">\r\n      <span class=\"o-inventory__item-name o-text-span\">${matName}</span>\r\n      <span class=\"o-inventory__item-amount o-text-span\">${quantityCounter[matId]}</span>\r\n      <span class=\"o-inventory__item-price o-text-span o-text-span--color\">$${rawAverage[matId]}</span>\r\n    </div>\r\n    `;                  \r\n  }\r\n}\r\n\r\nstartApp();\r\nstartInventory();\r\n\r\n\r\n// Mat cost text span query\r\nconst matCost = document.querySelectorAll(\".o-crafts__item-cost\");\r\n// calculated cost in epics query\r\nconst craftCostInput = document.querySelectorAll(\".o-crafts__cost\");\r\n// Each item form query\r\nconst itemsToCraft = document.querySelectorAll('.o-crafts__interface');\r\n\r\n// Query to each inventory item\r\nconst inventoryItem = document.querySelectorAll('.o-inventory__item');\r\n\r\nconst updateInventory = () => {\r\n  let i = 0;\r\n  inventoryItem.forEach(item => {\r\n    const itemChildren = item.children;\r\n    const matId = materialList.children[i].id;\r\n    itemChildren[1].textContent = quantityCounter[matId].toString();    \r\n    itemChildren[2].textContent = '$' + rawAverage[matId].toString();\r\n    i++;\r\n  });\r\n};\r\n\r\n// Stores snapshots every event that modifies an stored object\r\nconst mementos = [];\r\n\r\nconst mementoSave = () => {\r\n  // Array stores the objects that make an snapshot\r\n  const mementoSnapshot = [\r\n    JSON.stringify(rawAverage), \r\n    JSON.stringify(quantityCounter), \r\n  ];\r\n  // Pushes each object in constructedObject to itemsMemento array\r\n  const itemsMemento = [];\r\n  constructedObjects.forEach(item => {\r\n    const itemsStatus = JSON.stringify(item);\r\n    itemsMemento.push(itemsStatus);\r\n  });\r\n  // Pushes itemsMemento to mementoSnapshot\r\n  mementoSnapshot.push(itemsMemento);\r\n  mementos.push(mementoSnapshot);\r\n}\r\n\r\n// Listens for submit events in top form\r\nsubmitMaterialsForm.addEventListener('submit', e => {\r\n  e.preventDefault();\r\n\r\n  buyMaterials(parseInt(matPrice.value), parseInt(matQuantity.value), selectedMat);\r\n  updateInventory();\r\n  submitMaterialsForm.reset();\r\n\r\n  // Updates objects values each submit event\r\n  let i = 0;\r\n  constructedObjects.forEach(obj => {\r\n    if (typeof materialsRecipe !== \"undefined\") {\r\n      obj.calcCraftCost();\r\n      obj.renderCrafts(i);\r\n      obj.enoughItems(i);    \r\n      \r\n    } else {\r\n      if (!constructedObjects[i].inSaleStatus) {\r\n        obj.calcCraftCost();\r\n        obj.renderEpics(i);\r\n        if (obj.price !== 0) {\r\n          obj.calcProfit(itemsToCraft[i].children[2]);\r\n        }\r\n      } \r\n      obj.enoughItems(i);             \r\n    }\r\n    // Saves every object every submit event  \r\n    localStorage.setItem(itemsToCraft[i].children[1].id, JSON.stringify(constructedObjects[i]));\r\n    i++;    \r\n  });    \r\n  mementoSave();\r\n});\r\n// Updates selectedMat value with the value selected in the dropdown list\r\ndropdownListDisplay.addEventListener('click', e => {\r\n  // Removes display none class\r\n  if (e.target === dropdownListDisplay || e.target === dropdownListDisplay.children[0]) {\r\n    dropdownListDisplay.children[1].classList.toggle('o-materials__list--display-none');    \r\n  } else {\r\n    selectedMat = e.target.id;\r\n    // Gets textContent of an html element acceded by id\r\n    const selectedMatHTMLElement = document.getElementById(selectedMat).textContent;\r\n    // Modifies the span text in materials button, if it is Primorial Saronite, will just display first word (well that's just lazy fix)\r\n    materialListText.textContent = selectedMatHTMLElement === 'Primordial Saronite' ? 'Primordial' : selectedMatHTMLElement;\r\n    dropdownListDisplay.children[1].classList.toggle('o-materials__list--display-none');\r\n  }\r\n});\r\n\r\n\r\nitemsToCraft.forEach(form => {\r\n\r\n  form.addEventListener('submit', e => {  \r\n    e.preventDefault();\r\n    const formChildren = e.target.children;\r\n    const objIndex = Array.prototype.slice.call(itemsToCraft).indexOf(e.target);\r\n    if (typeof materialsRecipe !== 'undefined') {\r\n      \r\n      buyMaterials(parseInt(formChildren[0].textContent), parseInt(formChildren[2].value), formChildren[0].id);               \r\n      constructedObjects[objIndex].craftItem(parseInt(formChildren[2].value));\r\n      updateInventory();\r\n      for (let i = 0; i < constructedObjects.length; i++){\r\n        constructedObjects[i].enoughItems(i);\r\n      }\r\n      \r\n      e.target.reset();\r\n    } else {\r\n      constructedObjects[objIndex].inSale(formChildren, objIndex);\r\n      if (constructedObjects[objIndex].inSaleStatus) {\r\n        constructedObjects[objIndex].craftItem(1);\r\n        updateInventory();\r\n        for (let i = 0; i < constructedObjects.length; i++){\r\n          constructedObjects[i].enoughItems(i);\r\n        }\r\n      }      \r\n    }                  \r\n  });\r\n  // Listens to keyup events to call calcProfit method in an specific object\r\n  form.children[0].addEventListener('keyup', e => {  \r\n    const formChildren = e.target.parentElement.children;\r\n    // Converts HTML collection to an array and gets the index of the e.target\r\n  \r\n    const objIndex = Array.prototype.slice.call(itemsToCraft).indexOf(e.target.parentElement);\r\n    constructedObjects[objIndex].price = parseInt(formChildren[0].value);\r\n    constructedObjects[objIndex].calcProfit(formChildren[2]);        \r\n  })\r\n});\r\n\r\nconst updateApp = () => {\r\n  let i = 0;\r\n  constructedObjects.forEach(obj => {\r\n    \r\n    if (typeof materialsRecipe !== \"undefined\") {\r\n      obj.calcCraftCost();\r\n      obj.renderCrafts(i);\r\n      obj.enoughItems(i);\r\n     \r\n    } else {\r\n      if (!constructedObjects[i].inSaleStatus) {\r\n        obj.calcCraftCost();\r\n        obj.renderEpics(i);\r\n        if (obj.price !== 0) {\r\n          obj.calcProfit(itemsToCraft[i].children[2]);\r\n        }              \r\n      } \r\n      obj.enoughItems(i);         \r\n    }\r\n    i++;\r\n  });    \r\n}\r\n\r\n\r\n\r\nconst undo = () => {\r\n  // Removes last snapshot from mementos\r\n  mementos.pop();\r\n  // Sets the objects values to the last memento snapshot\r\n  const lastMemento = mementos[mementos.length - 1];\r\n  // Sets inventory and averages keys to localStorage\r\n  localStorage.setItem('averages', lastMemento[0]);\r\n  localStorage.setItem('inventory', lastMemento[1]);\r\n\r\n  // Sets rawAverage and quantityCounter to lastMemento values\r\n  if (lastMemento !== 'undefined') {\r\n    rawAverage = JSON.parse(lastMemento[0]);\r\n    quantityCounter = JSON.parse(lastMemento[1]);\r\n    // Sets constructedObject properties to the values of the lastMemento 3rd element\r\n    // Lops trough lastMemento 3rd element (array)\r\n    let i = 0;\r\n    // gets itemsPerRecipe keys (the names/ids of the epic Crafts)\r\n    const epicCrafts = Object.keys(itemsPerRecipe);\r\n    lastMemento[2].forEach(obj => {\r\n      const parsedObject = JSON.parse(obj);    \r\n      // Sets constructedObjects objects to localstorage    \r\n      localStorage.setItem(epicCrafts[i], obj);\r\n      // Sets current constructedObjects properties' values to the lastMemento ones\r\n      constructedObjects[i].cost = parsedObject.cost;\r\n      constructedObjects[i].price = parsedObject.price;\r\n      constructedObjects[i].profit = parsedObject.profit;\r\n      constructedObjects[i].inSaleStatus = parsedObject.inSaleStatus;\r\n      stylingButtonClass = constructedObjects[i].inSaleStatus ? 'o-crafts__btn--in-sale' : 'none';\r\n      // Renders the items again with the new values\r\n      displayCrafts.innerHTML += `\r\n        <div class=\"o-crafts__item\">\r\n          <h3 class=\"o-crafts__title o-crafts__item-name o-text o-text-title\">${constructedObjects[i].name}</h3>\r\n          <form class=\"o-crafts__interface\">              \r\n            <input type=\"text\" class=\"o-crafts__input o-crafts__price o-input\" value=\"${constructedObjects[i].price}\" placeholder=\"$\">\r\n            <input type=\"text\" class=\"o-crafts__input o-crafts__cost o-input\" id=\"${epicCrafts[i]}\" value=\"${constructedObjects[i].cost}\">\r\n            <span class=\"o-crafts__text o-crafts__profit o-text-span\">${constructedObjects[i].profit}</span>\r\n            <button type=\"submit\" class=\"o-crafts__btn o-btn ${stylingButtonClass}\">In Sale</button>\r\n          </form>\r\n        </div>\r\n      `;\r\n      updateInventory();\r\n      i++;\r\n    });\r\n  }   \r\n}\r\nundoButton.addEventListener('click', () => {\r\n  undo();\r\n});\r\nmementoSave();\r\nupdateApp();\r\n\r\n\n\n//# sourceURL=webpack://bestdeal---refactoring/./src/scripts/app.js?");

/***/ }),

/***/ "./src/scripts/items.js":
/*!******************************!*\
  !*** ./src/scripts/items.js ***!
  \******************************/
/***/ (() => {

eval("// Stores the averages from each item\r\n\r\nlet rawAverage = {\r\n    primordialSaronite: 0,  \r\n    crusaderOrb: 0,\r\n    titansteelBar: 0,\r\n    saroniteBar: 0,\r\n    eternalEarth: 0,\r\n    eternalFire: 0,\r\n    eternalLife: 0,\r\n    eternalWater: 0,\r\n    eternalAir: 0,\r\n    kingsAmber: 0,\r\n    majesticZircon: 0,\r\n    arcticFur: 0,\r\n    eternalShadow: 0,\r\n    icyDragon: 0,\r\n    nerubianChitin: 0,\r\n    heavyBorean: 0,\r\n    jormungarScale: 0,\r\n    abyssCrystal: 0,\r\n    spellweave: 0,\r\n    ebonweave: 0,\r\n    mooncloth: 0,\r\n    cardinalRuby: 0,\r\n    dreamshard: 0,\r\n    eyeOfZul: 0,\r\n    boreanLeather: 0,\r\n    imbuedFwCloth: 0,\r\n    fwCloth: 0,\r\n    fwBolt: 0,\r\n    infiniteDust: 0\r\n\r\n\r\n\r\n};\r\n\r\n// Collect quantities from each submit event\r\nlet quantityCounter = {\r\n    primordialSaronite: 0,  \r\n    crusaderOrb: 0,\r\n    titansteelBar: 0,\r\n    saroniteBar: 0,\r\n    eternalEarth: 0,\r\n    eternalFire: 0,\r\n    eternalLife: 0,\r\n    eternalWater: 0,\r\n    eternalAir: 0,\r\n    kingsAmber: 0,\r\n    majesticZircon: 0,\r\n    arcticFur: 0,\r\n    eternalShadow: 0,\r\n    icyDragon: 0,\r\n    nerubianChitin: 0,\r\n    heavyBorean: 0,\r\n    jormungarScale: 0,\r\n    abyssCrystal: 0,\r\n    spellweave: 0,\r\n    ebonweave: 0,\r\n    mooncloth: 0,\r\n    cardinalRuby: 0,\r\n    dreamshard: 0,\r\n    eyeOfZul: 0,\r\n    boreanLeather: 0,\r\n    imbuedFwCloth: 0,\r\n    fwCloth: 0,\r\n    fwBolt: 0,\r\n    infiniteDust: 0\r\n\r\n};\n\n//# sourceURL=webpack://bestdeal---refactoring/./src/scripts/items.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./src/scripts/app.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/scripts/items.js"]();
/******/ 	
/******/ })()
;